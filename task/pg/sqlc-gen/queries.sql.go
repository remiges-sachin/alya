// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: queries.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"

	"github.com/sqlc-dev/pqtype"
)

const createTaskEntry = `-- name: CreateTaskEntry :exec
INSERT INTO tasks ( type, status, submitted_at, started_at, completed_at, result_path, details)
VALUES ( $1, $2, $3, $4, $5, $6, $7)
`

type CreateTaskEntryParams struct {
	Type        string                `json:"type"`
	Status      string                `json:"status"`
	SubmittedAt time.Time             `json:"submitted_at"`
	StartedAt   sql.NullTime          `json:"started_at"`
	CompletedAt sql.NullTime          `json:"completed_at"`
	ResultPath  sql.NullString        `json:"result_path"`
	Details     pqtype.NullRawMessage `json:"details"`
}

func (q *Queries) CreateTaskEntry(ctx context.Context, arg CreateTaskEntryParams) error {
	_, err := q.db.ExecContext(ctx, createTaskEntry,
		arg.Type,
		arg.Status,
		arg.SubmittedAt,
		arg.StartedAt,
		arg.CompletedAt,
		arg.ResultPath,
		arg.Details,
	)
	return err
}

const getTaskEntry = `-- name: GetTaskEntry :one
SELECT id, type,  status, submitted_at, started_at, completed_at, result_path, details
FROM tasks
WHERE id = $1
`

func (q *Queries) GetTaskEntry(ctx context.Context, id int32) (Task, error) {
	row := q.db.QueryRowContext(ctx, getTaskEntry, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Status,
		&i.SubmittedAt,
		&i.StartedAt,
		&i.CompletedAt,
		&i.ResultPath,
		&i.Details,
	)
	return i, err
}
